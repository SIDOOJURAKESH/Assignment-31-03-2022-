#include <stdio.h>
#include <stdlib.h>

typedef struct stu
{
    int data;
    struct stu *link; 
}node;


void create_circularnode(node **);
void sllcreate(node **,int);
void Circular_list_or_not(node **,node **);
void Display(node **,node **);


int main()
{
    node *head=NULL;
    node *head1=NULL;
    int x,n,len;
    while(1)
    {
        printf("\n1.Create circularlinked list\n2.sll create\n3.check circular or not\n4.Display\n0.exit\n");
        scanf("%d",&x);
        switch(x)
        {
            case 1: create_circularnode(&head);
                    break;
            case 2: printf("Enter the length of the linked list: \n");
                    scanf("%d",&len);
                    sllcreate(&head1,len);
                    break;
            case 3:Circular_list_or_not(&head,&head1);
                    break;
            case 4: Display(&head,&head1);
                    break;
            default:exit(1);
        }
    }
    
    return 0;
}

void create_circularnode(node **head)
{
    node *new,*temp=NULL;
    int i,len;
    printf("Enter the length of the linked list: \n");
    scanf("%d",&len);
    for(i=1;i<=len;i++)
    {
        new=(node *)malloc(sizeof(node));
        printf("Enter elements in a list: ");
        scanf("%d",&new->data);
        new->link=NULL;
        if((*head)==NULL)
        {
            (*head)=temp=new;
        }
        else
        {
            temp->link=new;
            temp=new;
        }
        temp->link=(*head);
        
    }  
    
}


void sllcreate(node **head1,int len)
{
    node *new,*temp=NULL;
    int i;
    for(i=1;i<=len;i++)
    {
        new=(node *)malloc(sizeof(node));
        printf("Enter elements in a list: ");
        scanf("%d",&new->data);
        new->link=NULL;
        if((*head1)==NULL)
        {
            (*head1)=temp=new;
        }
        else
        {
            temp->link=new;
            temp=new;
        }
       // temp->link=head;
        
    }  
    
}


void Circular_list_or_not(node **head,node **head1)
{
    
    if((*head)==NULL)
    {
        printf("Circular list is empty\n");
    }
    else
    {
        node *temp_node=(*head);
        while(temp_node->link!=(*head))
        {
            printf("%d\t",temp_node->data);
            temp_node=temp_node->link;
        }
        printf("%d\n",temp_node->data);
	    if((temp_node)->link==(*head))
	    {
		    printf("List is a Circular single list\n");
	    }
	    else
	    {
		    printf("List is not a Circular single list\n");
	    }
    }
    
    
    if((*head1)==NULL)
    {
        printf("SLL list is empty\n");
    }
    else
    {
        node *temp_node1=(*head1);
        while((temp_node1->link)!=NULL)
        {
            printf("%d\t",temp_node1->data);
            temp_node1=temp_node1->link;
        }
        printf("%d\n",temp_node1->data);
	    if((temp_node1)->link==(*head1))
	    {
		    printf("List is a Circular single list\n");
	    }
	    else
	    {
		    printf("List is not a Circular single list\n");
	    }
    }
}

void Display(node **head,node **head1)
{
    node *ptr=NULL,*ptr1=NULL;
    ptr=(*head);
    ptr1=(*head1);
    if(ptr==NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        while((ptr->link)!=(*head))
        {
            printf("%d\t",ptr->data);
            ptr=ptr->link;
        }
        printf("%d\n",ptr->data);
    }
    
    if(ptr1==NULL)
    {
        printf("Sll is List is empty\n");
    }
    else
    {
        while((ptr1->link)!=NULL)
        {
            printf("%d\t",ptr1->data);
            ptr1=ptr1->link;
        }
        printf("%d\n",ptr1->data);
    }
}
